name: Rust
on: 
  push:
    branches:
      - main

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  RUSTFLAGS: -D warnings

jobs:
  build:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    runs-on: ubuntu-20.04
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Setup the Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - name: Cache cargo dependencies
        uses: Swatinem/rust-cache@v1

      - name: Cargo check
        uses: actions-rs/cargo@v1
        with:
          command: check

      - name: Check formatting with rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Linting with Clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: -- -D warnings

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test 

      - name: Run cargo-tarpaulin
        uses: actions-rs/tarpaulin@v0.1
        with:
          version: '0.16.0'
          args: '-- --test-threads 1'

      - name: Upload code coverage to codecov.io
        uses: codecov/codecov-action@v1.0.2
        with:
          token: ${{secrets.CODECOV_TOKEN}}

      - name: Archive code coverage results
        uses: actions/upload-artifact@v1
        with:
          name: code-coverage-report
          path: cobertura.xml

  release:
    runs-on: ubuntu-20.04
    needs: build
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: Setup rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - name: Cache cargo dependencies
        uses: Swatinem/rust-cache@v1

      - name: Install set-cargo-version
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: set-cargo-version

      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: 12
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
      
      - name: Install semantic-release
        run: |
          npm install -g semantic-release \
                        @semantic-release/changelog \
                        @semantic-release/commit-analyzer \
                        @semantic-release/exec \
                        semantic-release/git \
                        semantic-release/release-notes-generator

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_GITHUB_TOKEN }}
        run: chmod +x ./prepare-release.sh && npx semantic-release
