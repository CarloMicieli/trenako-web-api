---
openapi: "3.0.3"
info:
  title: Trenako
  description: A model railway collections api
  version: 1.0.0
  termsOfService: http://www.trenako.com/terms
  contact:
    email: mail@trenako.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: http://localhost:5000
    description: local

security:
  - BearerAuth: []

paths:
  /api/brands:
    get:
      summary: get the list of brands
      tags:
        - Brands
      operationId: getBrands
      parameters:
        - name: start
          description: the starting element index for the result set
          in: query
          schema:
            type: integer
            format: int32
            minimum: 0
        - name: limit
          description: the number of elements contained in the result set
          in: query
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses:
        "200":
          description: ok
          content:
            "application/vnd.trenako.brands+json":
              schema:
                $ref: "./brands.yaml#/components/schemas/Brands"
        "401":
          $ref: "./errors.yaml#/components/responses/UnauthorizedError"
        "404":
          $ref: "./errors.yaml#/components/responses/NotFoundError"
        "500":
          $ref: "./errors.yaml#/components/responses/Error"
    post:
      summary: create a new model railway brand
      tags:
        - Brands
      operationId: createBrand
      requestBody:
        description: a new brand
        required: true
        content:
          "application/json":
            schema:
              $ref: "./brands.yaml#/components/schemas/NewBrand"
      responses:
        "201":
          description: new brand created
          headers:
            location:
              schema:
                type: string
                format: uri
              description: the uri for the newly created brand
        "400":
          $ref: "./errors.yaml#/components/responses/BadRequestError"
        "401":
          $ref: "./errors.yaml#/components/responses/UnauthorizedError"
        "422":
          $ref: "./errors.yaml#/components/responses/UnprocessableEntityError"
        "500":
          $ref: "./errors.yaml#/components/responses/Error"

  /api/brands/{brand}:
    get:
      summary: get a brand
      tags:
        - Brands
      operationId: getBrand
      parameters:
        - name: brand
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            "application/vnd.trenako.brand+json":
              schema:
                $ref: "./brands.yaml#/components/schemas/Brand"
        "401":
          $ref: "./errors.yaml#/components/responses/UnauthorizedError"
        "404":
          $ref: "./errors.yaml#/components/responses/NotFoundError"
        "500":
          $ref: "./errors.yaml#/components/responses/Error"
    delete:
      summary: delete a brand
      tags:
        - Brands
      operationId: deleteBrand
      parameters:
        - name: brand
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: brand was removed
        "401":
          $ref: "./errors.yaml#/components/responses/UnauthorizedError"
        "404":
          $ref: "./errors.yaml#/components/responses/NotFoundError"
        "422":
          description: brand is in use
          content:
            "application/vnd.trenako.problem+json":
              schema:
                $ref: "./errors.yaml#/components/schemas/ProblemDetail"
        "500":
          $ref: "./errors.yaml#/components/responses/Error"
    put:
      summary: update a brand
      tags:
        - Brands
      operationId: updateBrand
      parameters:
        - name: brand
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: the updated brand
        required: true
        content:
          "application/json":
            schema:
              $ref: "./brands.yaml#/components/schemas/BrandUpdate"
      responses:
        "204":
          description: the brand has been updated
          headers:
            location:
              schema:
                type: string
                format: uri
              description: the uri for the newly created brand
        "400":
          $ref: "./errors.yaml#/components/responses/BadRequestError"
        "401":
          $ref: "./errors.yaml#/components/responses/UnauthorizedError"
        "404":
          $ref: "./errors.yaml#/components/responses/NotFoundError"
        "422":
          $ref: "./errors.yaml#/components/responses/UnprocessableEntityError"
        "500":
          $ref: "./errors.yaml#/components/responses/Error"

  /api/catalog-items:
    post:
      summary: create a new catalog item
      tags:
        - CatalogItems
      operationId: createCatalogItem
      requestBody:
        description: a new catalog item
        required: true
        content:
          application/json:
            schema:
              $ref: "./catalog-items.yaml#/components/schemas/NewCatalogItem"
      responses:
        "201":
          description: a new catalog item has been created
          headers:
            location:
              schema:
                type: string
                format: uri
              description: the uri for the new catalog item
        "400":
          $ref: "./errors.yaml#/components/responses/BadRequestError"
        "401":
          $ref: "./errors.yaml#/components/responses/UnauthorizedError"
        "422":
          $ref: "./errors.yaml#/components/responses/UnprocessableEntityError"
        "500":
          $ref: "./errors.yaml#/components/responses/Error"

  /api/catalog-items/{catalogItemId}:
    get:
      summary: get a catalog item
      tags:
        - CatalogItems
      operationId: getCatalogItem
      parameters:
        - name: catalogItemId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            "application/vnd.trenako.catalog.item+json":
              schema:
                $ref: "./catalog-items.yaml#/components/schemas/CatalogItem"
        "401":
          $ref: "./errors.yaml#/components/responses/UnauthorizedError"
        "404":
          $ref: "./errors.yaml#/components/responses/NotFoundError"
        "500":
          $ref: "./errors.yaml#/components/responses/Error"
    put:
      summary: update a catalog item
      tags:
        - CatalogItems
      operationId: updateCatalogItem
      parameters:
        - name: catalogItemId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: the updated catalog item
        required: true
        content:
          "application/json":
            schema:
              $ref: "./catalog-items.yaml#/components/schemas/CatalogItemUpdate"
      responses:
        "204":
          description: catalog item updated
        "400":
          $ref: "./errors.yaml#/components/responses/BadRequestError"
        "401":
          $ref: "./errors.yaml#/components/responses/UnauthorizedError"
        "404":
          $ref: "./errors.yaml#/components/responses/NotFoundError"
        "422":
          $ref: "./errors.yaml#/components/responses/UnprocessableEntityError"
        "500":
          $ref: "./errors.yaml#/components/responses/Error"

  /api/catalog-items/{catalogItemId}/rolling-stocks:
    post:
      summary: add a new rolling stock to this catalog item
      tags:
        - CatalogItems
      operationId: addRollingStock
      parameters:
        - name: catalogItemId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: a new rolling stock
        required: true
        content:
          application/json:
            schema:
              $ref: "./catalog-items.yaml#/components/schemas/RollingStockRequest"
      responses:
        "201":
          description: rolling stock created
          headers:
            location:
              schema:
                type: string
                format: uri
              description: the uri for the new rolling stock
        "400":
          $ref: "./errors.yaml#/components/responses/BadRequestError"
        "401":
          $ref: "./errors.yaml#/components/responses/UnauthorizedError"
        "404":
          $ref: "./errors.yaml#/components/responses/NotFoundError"
        "422":
          $ref: "./errors.yaml#/components/responses/UnprocessableEntityError"
        "500":
          $ref: "./errors.yaml#/components/responses/Error"

  /api/catalog-items/{catalogItemId}/rolling-stocks/{rollingStockId}:
    delete:
      summary: delete the rolling stock from the catalog item
      tags:
        - CatalogItems
      operationId: deleteRollingStock
      parameters:
        - name: catalogItemId
          in: path
          required: true
          schema:
            type: string
        - name: rollingStockId
          in: path
          required: true
          schema:
            type: string
            format: urn
      responses:
        "204":
          description: rolling stock deleted
        "400":
          $ref: "./errors.yaml#/components/responses/BadRequestError"
        "401":
          $ref: "./errors.yaml#/components/responses/UnauthorizedError"
        "404":
          $ref: "./errors.yaml#/components/responses/NotFoundError"
        "422":
          $ref: "./errors.yaml#/components/responses/UnprocessableEntityError"
        "500":
          $ref: "./errors.yaml#/components/responses/Error"
    put:
      summary: update the rolling stock in the catalog item
      tags:
        - CatalogItems
      operationId: updateRollingStock
      parameters:
        - name: catalogItemId
          in: path
          required: true
          schema:
            type: string
        - name: rollingStockId
          in: path
          required: true
          schema:
            type: string
            format: urn
      requestBody:
        description: a rolling stock update
        required: true
        content:
          application/json:
            schema:
              $ref: "./catalog-items.yaml#/components/schemas/RollingStockRequest"
      responses:
        "204":
          description: rolling stock updated
        "400":
          $ref: "./errors.yaml#/components/responses/BadRequestError"
        "401":
          $ref: "./errors.yaml#/components/responses/UnauthorizedError"
        "404":
          $ref: "./errors.yaml#/components/responses/NotFoundError"
        "422":
          $ref: "./errors.yaml#/components/responses/UnprocessableEntityError"
        "500":
          $ref: "./errors.yaml#/components/responses/Error"

  /api/railways:
    get:
      summary: get the list of railways
      tags:
        - Railways
      operationId: getRailways
      parameters:
        - name: start
          description: the starting element index for the result set
          in: query
          schema:
            type: integer
            format: int32
            minimum: 0
        - name: limit
          description: the number of elements contained in the result set
          in: query
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses:
        "200":
          description: OK
          content:
            "application/vnd.trenako.railways+json":
              schema:
                $ref: "./railways.yaml#/components/schemas/Railways"
        "401":
          $ref: "./errors.yaml#/components/responses/UnauthorizedError"
        "404":
          $ref: "./errors.yaml#/components/responses/NotFoundError"
        "500":
          $ref: "./errors.yaml#/components/responses/Error"
    post:
      summary: create a new railway
      tags:
        - Railways
      operationId: createRailway
      requestBody:
        description: a new railway
        required: true
        content:
          application/json:
            schema:
              $ref: "./railways.yaml#/components/schemas/NewRailway"
      responses:
        "201":
          description: a new railway has been created
          headers:
            location:
              schema:
                type: string
                format: uri
              description: the uri for the newly created railway
        "400":
          $ref: "./errors.yaml#/components/responses/BadRequestError"
        "401":
          $ref: "./errors.yaml#/components/responses/UnauthorizedError"
        "422":
          $ref: "./errors.yaml#/components/responses/UnprocessableEntityError"
        "500":
          $ref: "./errors.yaml#/components/responses/Error"

  /api/railways/{railway}:
    get:
      summary: get a railway
      tags:
        - Railways
      operationId: getRailway
      parameters:
        - name: railway
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            "application/vnd.trenako.railway+json":
              schema:
                $ref: "./railways.yaml#/components/schemas/Railway"
        "401":
          $ref: "./errors.yaml#/components/responses/UnauthorizedError"
        "404":
          $ref: "./errors.yaml#/components/responses/NotFoundError"
        "500":
          $ref: "./errors.yaml#/components/responses/Error"
    delete:
      summary: delete a railway
      tags:
        - Railways
      operationId: deleteRailway
      parameters:
        - name: railway
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: railway was removed
        "401":
          $ref: "./errors.yaml#/components/responses/UnauthorizedError"
        "404":
          $ref: "./errors.yaml#/components/responses/NotFoundError"
        "422":
          $ref: "./errors.yaml#/components/responses/UnprocessableEntityError"
        "500":
          $ref: "./errors.yaml#/components/responses/Error"
    put:
      summary: update a railway
      tags:
        - Railways
      operationId: updateRailway
      parameters:
        - name: railway
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: a new railway
        required: true
        content:
          "application/json":
            schema:
              $ref: "./railways.yaml#/components/schemas/RailwayUpdate"
      responses:
        "204":
          description: the railway has been updated
        "400":
          $ref: "./errors.yaml#/components/responses/BadRequestError"
        "401":
          $ref: "./errors.yaml#/components/responses/UnauthorizedError"
        "404":
          $ref: "./errors.yaml#/components/responses/NotFoundError"
        "422":
          $ref: "./errors.yaml#/components/responses/UnprocessableEntityError"
        "500":
          $ref: "./errors.yaml#/components/responses/Error"

  /api/scales:
    get:
      summary: get the list of scales
      tags:
        - Scales
      operationId: getScales
      parameters:
        - name: start
          description: the starting element index for the result set
          in: query
          schema:
            type: integer
            format: int32
            minimum: 0
        - name: limit
          description: the number of elements contained in the result set
          in: query
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses:
        "200":
          description: OK
          content:
            "application/vnd.trenako.scales+json":
              schema:
                $ref: "./scales.yaml#/components/schemas/Scales"
        "401":
          $ref: "./errors.yaml#/components/responses/UnauthorizedError"
        "404":
          $ref: "./errors.yaml#/components/responses/NotFoundError"
        "500":
          $ref: "./errors.yaml#/components/responses/Error"
    post:
      summary: create a new scale
      tags:
        - Scales
      operationId: createScale
      requestBody:
        description: a new scale
        required: true
        content:
          application/json:
            schema:
              $ref: "./scales.yaml#/components/schemas/NewScale"
      responses:
        "201":
          description: a new scale has been created
          headers:
            location:
              schema:
                type: string
                format: uri
              description: the uri for the newly scale railway
        "400":
          $ref: "./errors.yaml#/components/responses/BadRequestError"
        "401":
          $ref: "./errors.yaml#/components/responses/UnauthorizedError"
        "422":
          $ref: "./errors.yaml#/components/responses/UnprocessableEntityError"
        "500":
          $ref: "./errors.yaml#/components/responses/Error"

  /api/scales/{scale}:
    get:
      summary: get a scale
      tags:
        - Scales
      operationId: getScale
      parameters:
        - name: scale
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            "application/vnd.trenako.scale+json":
              schema:
                $ref: "./scales.yaml#/components/schemas/Scale"
        "401":
          $ref: "./errors.yaml#/components/responses/UnauthorizedError"
        "404":
          $ref: "./errors.yaml#/components/responses/NotFoundError"
        "500":
          $ref: "./errors.yaml#/components/responses/Error"
    delete:
      summary: delete a scale
      tags:
        - Scales
      operationId: deleteScale
      parameters:
        - name: scale
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: scale was removed
        "401":
          $ref: "./errors.yaml#/components/responses/UnauthorizedError"
        "404":
          $ref: "./errors.yaml#/components/responses/NotFoundError"
        "422":
          description: scale is in use
          content:
            "application/vnd.trenako.problem+json":
              schema:
                $ref: "./errors.yaml#/components/schemas/ProblemDetail"
        "500":
          $ref: "./errors.yaml#/components/responses/Error"
    put:
      summary: updates a scale
      tags:
        - Scales
      operationId: updateScale
      parameters:
        - name: scale
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: the updated scale
        required: true
        content:
          "application/json":
            schema:
              $ref: "./scales.yaml#/components/schemas/ScaleUpdate"
      responses:
        "204":
          description: the scale has been updated
        "400":
          $ref: "./errors.yaml#/components/responses/BadRequestError"
        "401":
          $ref: "./errors.yaml#/components/responses/UnauthorizedError"
        "404":
          $ref: "./errors.yaml#/components/responses/NotFoundError"
        "422":
          $ref: "./errors.yaml#/components/responses/UnprocessableEntityError"
        "500":
          $ref: "./errors.yaml#/components/responses/Error"

  /api/shops:
    get:
      summary: get shops
      tags:
        - shops
      operationId: getShops
      responses:
        "200":
          description: OK
          content:
            "application/vnd.trenako.shops+json":
              schema:
                $ref: "./shops.yaml#/components/schemas/Shops"
        "401":
          $ref: "./errors.yaml#/components/responses/UnauthorizedError"
        "404":
          $ref: "./errors.yaml#/components/responses/NotFoundError"
        "500":
          $ref: "./errors.yaml#/components/responses/Error"
    post:
      summary: create a new shop
      tags:
        - shops
      operationId: createShop
      requestBody:
        description: a new shop
        required: true
        content:
          application/json:
            schema:
              $ref: "./shops.yaml#/components/schemas/ShopRequest"
      responses:
        "201":
          description: new shop created
          headers:
            location:
              schema:
                type: string
                format: uri
              description: the uri for the new shop
        "400":
          $ref: "./errors.yaml#/components/responses/BadRequestError"
        "401":
          $ref: "./errors.yaml#/components/responses/UnauthorizedError"
        "422":
          $ref: "./errors.yaml#/components/responses/UnprocessableEntityError"
        "500":
          $ref: "./errors.yaml#/components/responses/Error"

  /api/shops/{shop_id}:
    get:
      summary: get a shop
      tags:
        - shops
      operationId: getShop
      parameters:
        - name: shop_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            "application/vnd.trenako.shop+json":
              schema:
                $ref: "./shops.yaml#/components/schemas/Shop"
        "401":
          $ref: "./errors.yaml#/components/responses/UnauthorizedError"
        "404":
          $ref: "./errors.yaml#/components/responses/NotFoundError"
        "500":
          $ref: "./errors.yaml#/components/responses/Error"
    post:
      summary: update a shop
      tags:
        - shops
      operationId: updateShop
      parameters:
        - name: shop_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: the shop to update
        required: true
        content:
          application/json:
            schema:
              $ref: "./shops.yaml#/components/schemas/ShopRequest"
      responses:
        "204":
          description: shop updated
        "400":
          $ref: "./errors.yaml#/components/responses/BadRequestError"
        "401":
          $ref: "./errors.yaml#/components/responses/UnauthorizedError"
        "404":
          $ref: "./errors.yaml#/components/responses/NotFoundError"
        "422":
          $ref: "./errors.yaml#/components/responses/UnprocessableEntityError"
        "500":
          $ref: "./errors.yaml#/components/responses/Error"

  /api/favourite-shops:
    get:
      summary: get favourite shops for the current user
      tags:
        - shops
      operationId: getFavouriteShops
      responses:
        "200":
          description: OK
          content:
            "application/vnd.trenako.favourite.shops+json":
              schema:
                $ref: "./shops.yaml#/components/schemas/FavouriteShops"
        "401":
          $ref: "./errors.yaml#/components/responses/UnauthorizedError"
        "404":
          $ref: "./errors.yaml#/components/responses/NotFoundError"
        "500":
          $ref: "./errors.yaml#/components/responses/Error"
    post:
      summary: add shop to the user favourites
      tags:
        - shops
      operationId: addShopToFavourites
      responses:
        "204":
          description: added to favourites
        "400":
          $ref: "./errors.yaml#/components/responses/BadRequestError"
        "401":
          $ref: "./errors.yaml#/components/responses/UnauthorizedError"
        "404":
          $ref: "./errors.yaml#/components/responses/NotFoundError"
        "500":
          $ref: "./errors.yaml#/components/responses/Error"

  /api/favourite-shops/{shop_id}:
    delete:
      summary: delete the shop from the user favourites
      tags:
        - shops
      operationId: deleteShopFromFavourites
      parameters:
        - name: shop_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: removed from favourites
        "401":
          $ref: "./errors.yaml#/components/responses/UnauthorizedError"
        "404":
          $ref: "./errors.yaml#/components/responses/NotFoundError"
        "500":
          $ref: "./errors.yaml#/components/responses/Error"

  /api/collections:
    post:
      summary: create a new collection
      tags:
        - collections
      operationId: createCollection
      requestBody:
        description: a new collection
        required: true
        content:
          "application/json":
            schema:
              $ref: "./collections.yaml#/components/schemas/CollectionRequest"
      responses:
        "201":
          description: collection created
          headers:
            location:
              schema:
                type: string
                format: uri
              description: the uri for the new collection
        "400":
          $ref: "./errors.yaml#/components/responses/BadRequestError"
        "401":
          $ref: "./errors.yaml#/components/responses/UnauthorizedError"
        "422":
          $ref: "./errors.yaml#/components/responses/UnprocessableEntityError"
        "500":
          $ref: "./errors.yaml#/components/responses/Error"
  
  /api/collections/{collection_id}:
    get:
      summary: get collection for the current user
      tags:
        - collections
      operationId: getCollection
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            "application/vnd.trenako.collection+json":
              schema:
                $ref: "./collections.yaml#/components/schemas/Collection"
        "401":
          $ref: "./errors.yaml#/components/responses/UnauthorizedError"
        "404":
          $ref: "./errors.yaml#/components/responses/NotFoundError"
        "500":
          $ref: "./errors.yaml#/components/responses/Error"
    put:
      summary: update a collection
      tags:
        - collections
      operationId: updateCollection
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: a new collection
        required: true
        content:
          "application/json":
            schema:
              $ref: "./collections.yaml#/components/schemas/CollectionRequest"
      responses:
        "204":
          description: collection updated
        "400":
          $ref: "./errors.yaml#/components/responses/BadRequestError"
        "401":
          $ref: "./errors.yaml#/components/responses/UnauthorizedError"
        "404":
          $ref: "./errors.yaml#/components/responses/NotFoundError"
        "422":
          $ref: "./errors.yaml#/components/responses/UnprocessableEntityError"
        "500":
          $ref: "./errors.yaml#/components/responses/Error"
    delete:
      summary: delete a collection
      tags:
        - collections
      operationId: deleteCollection
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: collection deleted
        "400":
          $ref: "./errors.yaml#/components/responses/BadRequestError"
        "401":
          $ref: "./errors.yaml#/components/responses/UnauthorizedError"
        "404":
          $ref: "./errors.yaml#/components/responses/NotFoundError"
        "422":
          $ref: "./errors.yaml#/components/responses/UnprocessableEntityError"
        "500":
          $ref: "./errors.yaml#/components/responses/Error"

  /api/collections/{collection_id}/statistics:
    get:
      summary: get collection statistics for the current user
      tags:
        - collections
      operationId: getCollectionStatistics
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            "application/vnd.trenako.collection.statistics+json":
              schema:
                $ref: "./collections.yaml#/components/schemas/CollectionStatistics"
        "401":
          $ref: "./errors.yaml#/components/responses/UnauthorizedError"
        "404":
          $ref: "./errors.yaml#/components/responses/NotFoundError"
        "500":
          $ref: "./errors.yaml#/components/responses/Error"

  /api/collections/{collection_id}/items:
    post:
      summary: add new element to the collection
      tags:
        - collections
      operationId: addCollectionItem
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: a new collection item
        required: true
        content:
          "application/json":
            schema:
              $ref: "./collections.yaml#/components/schemas/CollectionItemRequest"
      responses:
        "201":
          description: item added to the collection
          headers:
            location:
              schema:
                type: string
                format: uri
              description: the uri for the new collection item
        "400":
          $ref: "./errors.yaml#/components/responses/BadRequestError"
        "401":
          $ref: "./errors.yaml#/components/responses/UnauthorizedError"
        "404":
          $ref: "./errors.yaml#/components/responses/NotFoundError"
        "422":
          $ref: "./errors.yaml#/components/responses/UnprocessableEntityError"
        "500":
          $ref: "./errors.yaml#/components/responses/Error"

  /api/collections/{collection_id}/items/{item_id}:
    put:
      summary: update collection item
      tags:
        - collections
      operationId: editCollectionItem
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: item_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: the updated collection item
        required: true
        content:
          "application/json":
            schema:
              $ref: "./collections.yaml#/components/schemas/CollectionItemRequest"
      responses:
        "204":
          description: collection item updated
        "400":
          $ref: "./errors.yaml#/components/responses/BadRequestError"
        "401":
          $ref: "./errors.yaml#/components/responses/UnauthorizedError"
        "404":
          $ref: "./errors.yaml#/components/responses/NotFoundError"
        "422":
          $ref: "./errors.yaml#/components/responses/UnprocessableEntityError"
        "500":
          $ref: "./errors.yaml#/components/responses/Error"
    delete:
      summary: delete item from collection
      tags:
        - collections
      operationId: deleteCollectionItem
      parameters:
        - name: collection_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: item_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: collection item deleted
        "400":
          $ref: "./errors.yaml#/components/responses/BadRequestError"
        "401":
          $ref: "./errors.yaml#/components/responses/UnauthorizedError"
        "404":
          $ref: "./errors.yaml#/components/responses/NotFoundError"
        "422":
          $ref: "./errors.yaml#/components/responses/UnprocessableEntityError"
        "500":
          $ref: "./errors.yaml#/components/responses/Error"

  /api/wishlists:
    post:
      summary: create a new wishlist for the current user
      tags:
        - wishlists
      operationId: createWishlist
      requestBody:
        description: a new wishlist
        required: true
        content:
          "application/json":
            schema:
              $ref: "./wishlists.yaml#/components/schemas/WishlistRequest"
      responses:
        "201":
          description: wishlist created
          headers:
            location:
              schema:
                type: string
                format: uri
              description: the uri for the new wishlist
        "400":
          $ref: "./errors.yaml#/components/responses/BadRequestError"
        "401":
          $ref: "./errors.yaml#/components/responses/UnauthorizedError"
        "422":
          $ref: "./errors.yaml#/components/responses/UnprocessableEntityError"
        "500":
          $ref: "./errors.yaml#/components/responses/Error"

  /api/wishlists/{wishlist_id}:
    get:
      summary: get the wishlist
      tags:
        - wishlists
      operationId: getWishlist
      parameters:
        - name: wishlist_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            "application/vnd.trenako.wishlist+json":
              schema:
                $ref: "./wishlists.yaml#/components/schemas/Wishlist"
        "401":
          $ref: "./errors.yaml#/components/responses/UnauthorizedError"
        "404":
          $ref: "./errors.yaml#/components/responses/NotFoundError"
        "500":
          $ref: "./errors.yaml#/components/responses/Error"
    delete:
      summary: delete the wishlist
      tags:
        - wishlists
      operationId: deleteWishlist
      parameters:
        - name: wishlist_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: wishlist deleted
        "401":
          $ref: "./errors.yaml#/components/responses/UnauthorizedError"
        "404":
          $ref: "./errors.yaml#/components/responses/NotFoundError"
        "500":
          $ref: "./errors.yaml#/components/responses/Error"
    put:
      summary: update wishlist
      tags:
        - wishlists
      operationId: updateWishlist
      parameters:
        - name: wishlist_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: updated wishlist
        required: true
        content:
          "application/json":
            schema:
              $ref: "./wishlists.yaml#/components/schemas/WishlistRequest"
      responses:
        "204":
          description: wishlist updated
        "400":
          $ref: "./errors.yaml#/components/responses/BadRequestError"
        "401":
          $ref: "./errors.yaml#/components/responses/UnauthorizedError"
        "404":
          $ref: "./errors.yaml#/components/responses/NotFoundError"
        "422":
          $ref: "./errors.yaml#/components/responses/UnprocessableEntityError"
        "500":
          $ref: "./errors.yaml#/components/responses/Error"

  /api/wishlists/{wishlist_id}/items/{item_id}:
    put:
      summary: update wishlist item
      tags:
        - wishlists
      operationId: updateWishlistItem
      parameters:
        - name: wishlist_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: item_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: updated wishlist item
        required: true
        content:
          "application/json":
            schema:
              $ref: "./wishlists.yaml#/components/schemas/WishlistItemRequest"
      responses:
        "204":
          description: wishlist item updated
        "400":
          $ref: "./errors.yaml#/components/responses/BadRequestError"
        "401":
          $ref: "./errors.yaml#/components/responses/UnauthorizedError"
        "404":
          $ref: "./errors.yaml#/components/responses/NotFoundError"
        "422":
          $ref: "./errors.yaml#/components/responses/UnprocessableEntityError"
        "500":
          $ref: "./errors.yaml#/components/responses/Error"
    delete:
      summary: delete item from wishlist
      tags:
        - wishlists
      operationId: deleteWishlistItem
      parameters:
        - name: wishlist_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: item_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: a new wishlist item
        required: true
        content:
          "application/json":
            schema:
              $ref: "./wishlists.yaml#/components/schemas/WishlistItemRequest"
      responses:
        "204":
          description: wishlist item deleted
        "400":
          $ref: "./errors.yaml#/components/responses/BadRequestError"
        "401":
          $ref: "./errors.yaml#/components/responses/UnauthorizedError"
        "404":
          $ref: "./errors.yaml#/components/responses/NotFoundError"
        "422":
          $ref: "./errors.yaml#/components/responses/UnprocessableEntityError"
        "500":
          $ref: "./errors.yaml#/components/responses/Error"

  /api/wishlists/owner/{owner}:
    get:
      summary: get wishlists by owner
      tags:
        - wishlists
      operationId: getWishlistsByOwner
      parameters:
        - name: owner
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            "application/vnd.trenako.collection.statistics+json":
              schema:
                $ref: "./wishlists.yaml#/components/schemas/Wishlists"
        "401":
          $ref: "./errors.yaml#/components/responses/UnauthorizedError"
        "404":
          $ref: "./errors.yaml#/components/responses/NotFoundError"
        "500":
          $ref: "./errors.yaml#/components/responses/Error"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
